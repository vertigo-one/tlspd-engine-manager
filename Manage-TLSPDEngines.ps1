<#
.SYNOPSIS
Script for managing the Venafi TLSPD dependencies on multiple TLSPD engines. 
Allows Windows service status & restart; run IIS resets; and push, list, or delete adaptable drivers on each chosen TLSPD engine.

.DESCRIPTION
Script for managing the Venafi windows services and dependencies in bulk on multiple TLSPD engines without using RDP (uses Powershell remoting).
WinRM/Powershell remoting must be enabled on all TLSPD engine servers and the server/workstation that is running this script. 

Get status of or restart Venafi windows services. 
Defaults to all of the below but a subset can be specified. 
- VenafiWcfHost
- VenafiLogServer
- VenafiESTService
- VED

IIS Management: Authentication must be done by a user who has permissions to do this. 
- Run iisreset on each engine.

Adaptable Management (all Types)
- Copy adpatable driver from local machine to correct engine folder for adaptable type on each specified engines. 
  - Programatic passing of the filepath to the file on the local system or GUI file picker supported.
- List adaptable driver of chosen type on each specified engine. 
  - Defaults to ps1 files only but all files in folder supported.
- Delete adaptable driver of chosen type on each specified engine.
  - Programatic passing of the file name or choosing from a list of files retrieved from the servers supported.

.PARAMETER EngineName
Specifies an array of names of Servers hosting TLSPD engines to perform actions on. 
Type the NetBIOS name, an IP address, or a fully qualified domain name of one or more remote computers.

NOTE: Ability to use NetBIOS, IP, or FQDN will depend on your environment.
Examples:
- TLSPD01
- 192.168.1.1
- TLSPD01.corp.net

.PARAMETER Credential
Specifies a user account that has permission to perform this action. 

Type a user name, such as User01 or Domain01\User01, or enter a PSCredential object generated by the 
Get-Credential cmdlet. If you type a user name, you're prompted to enter the password.

Credentials are stored in a PSCredential object and the password is stored as a SecureString.

This user should have right to open an Admin Powershell window if -IISReset is used.

.PARAMETER VenafiServices
Specifies the Services to get the status of or to restart. 

Defaults to all windows services: 'VenafiWcfHost','VenafiLogServer','VenafiESTService' and 'VED'

Any combination of the default services can be chosen.

.PARAMETER Status
Get the status of all of the windows services or only the specified services on the specified TLSPD Engines

This is the Default action. Running this script with nothing but -EngineName and -Credential is 
the same as running the script with this switch.

.PARAMETER Restart 
Restart all of the windows services or only the specified services on the specified TLSPD Engines

.PARAMETER IISReset
Reset IIS via an iisreset on the specified TLSPD Engines. 

The User account used with -Credential should have Administrator rights on the servers. 

.PARAMETER ListAdaptables
List Adaptable Scripts (*.ps1 files) of the chosen adaptable type that are currenly on the specified TLSPD Engines. 

Must be used with -AdaptableType to specify the Adaptable folder to look in.

Use -AllFileTypes with this parameter to list all files instead of just Powershell Scripts. 

.PARAMETER AllFileTypes
List all file types found in the Adaptable folder of the chosen type instead of just *.ps1 files. 
Use with -ListAdaptables and -DeleteAdatable

Must be used with -AdaptableType to specify the Adaptable folder to look in.

.PARAMETER PushAdaptable
Push a locally stored Adaptable Driver to the specified TLSPD Engines. 

Must be used with -AdaptableType to specify the Adaptable folder to install into.
This is the type of adaptable Driver

Can be used with -AdaptableFileLocalPath to provide the file path to the 
adaptable driver on the local system this script is run on.

.PARAMETER DeleteAdaptable
Delete a Adaptable Driver from the specified TLSPD Engines. Run -ListAdaptables to
determine the names of the Adaptable Driver Files on each engine.

Must be used with -AdaptableType to specify the Adaptable folder to install into

Must be used with -AdaptableFileName to provide the filename of the Adaptable Driver
to delete on the chosen TLSPD engines. 

.PARAMETER ListFromEngine
Retrieve a list of adaptables installed on the TLSPD engines and display a menu
to choose what adaptable to delete. Only one selection allowed. Must pick a number.


.PARAMETER AdaptableType
Specify the type of Adaptable Driver to list, push, or delete from the specified TLSPD Engines.
Supports "App", "Bulk", "CA", "Credential", "Log", "SSHIssuanceFlow", "SSHManagement", and "Workflow"

Determines what Adaptable folder the -ListAdaptables, -PushAdaptable, and -DeleteAdaptable
parameters interact with on the chosen TLSPD Engines.

.PARAMETER AdaptableFileLocalPath
The file path to the Adaptable Driver on the local system to push to the TLSPD Engines. 

If this is not provided then a windows file picker GUI will be lauched so the user can pick the file. 

.PARAMETER AdaptableFileName
The filename + extension of the Adaptable Driver to delete from the specified TLSPD Engines.
ex) myAdaptableDriver.ps1

Run -ListAdaptables to determine the correct values for this parameter.

.PARAMETER Confirm
Risk of use for production systems: High

Bypass the confirmation prompt for Service restarts, adaptable push and deletion, and iisresets

Do not use this your first time running a command. There are no second chances.

.PARAMETER Quiet
Silences the default Informational output. 

.EXAMPLE
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -Status

Get the Status of all Venafi services on TLSPD01.corp.net and TLSPD02.corp.net

.EXAMPLE 
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -Restart -VenafiServices "VED","VenafiLogServer"

Restart the VED (Platform) and Venafi Log Server sevices on TLSPD01.corp.net and TLSPD02.corp.net. 

.EXAMPLE
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -IISReset

Restart IIS on TLSPD01.corp.net and TLSPD02.corp.net

.EXAMPLE
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -ListAdaptables -AdaptableType CA -AllFileTypes

List all Adaptable CAs Drivers installed on TLSPD01.corp.net and TLSPD02.corp.net and any configuration files as well. 

.EXAMPLE
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -DeleteAdaptable -AdaptableType App -ListFromEngine

Delete Adaptable Application Drivers from TLSPD01.corp.net and TLSPD02.corp.net and choose the Driver to delete using a menu

.EXAMPLE
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -DeleteAdaptable -AdaptableType App -AdaptableFileName "CustomAPPDriver.ps1"

Delete the CustomAPPDriver.ps1 Adaptable Application Driver from TLSPD01.corp.net and TLSPD02.corp.net. 

.EXAMPLE
.\Manage-TLSPDEngines.ps1 -EngineName TLSPD01.corp.net,TLSPD02.corp.net -Credential $credential -PushAdaptable -AdaptableType Log -AdaptableFileLocalPath "C:\testedDrivers\mylogdriver.ps1"

Install the mylogdriver.ps1 Adaptable Log Driver onto TLSPD01.corp.net and TLSPD02.corp.net. 
If -AdaptableFileLocalPath is not provided, a File picker popup will display.


#>

[CmdletBinding(DefaultParameterSetName = 'status')]
[Alias("Manage-TPPEngines")]
param (
    [Parameter(Mandatory = $true)]
    [Alias("ComputerName")]
    [string[]]$EngineName,

    [Parameter(Mandatory = $true)]
    [pscredential]$Credential,

    [Parameter(ParameterSetName="servicerestart")]
    [Parameter(ParameterSetName="status")]
    [Alias("Services")]
    [ValidateSet("VenafiWcfHost","VenafiLogServer","VenafiESTService","VED")]
    [string[]]$VenafiServices = (,'VenafiLogServer','VenafiESTService','VED'),

    [Parameter(ParameterSetName="status")]
    [switch]$Status,

    [Parameter(ParameterSetName="servicerestart")]
    [switch]$Restart,

    [Parameter(ParameterSetName="iisreset")]
    [switch]$IISReset,

    [Parameter(ParameterSetName="listadaptables")]
    [switch]$ListAdaptables,

    [Parameter(ParameterSetName="listadaptables")]
    [Parameter(ParameterSetName="deleteadaptablesmenu")]
    [switch]$AllFileTypes,

    [Parameter(ParameterSetName="pushadaptables")]
    [Alias("InstallAdaptable")]
    [switch]$PushAdaptable,

    [Parameter(ParameterSetName="deleteadaptables")]
    [Parameter(ParameterSetName="deleteadaptablesmenu")]
    [Alias("RemoveAdaptable")]
    [switch]$DeleteAdaptable,

    [Parameter(ParameterSetName="deleteadaptablesmenu")]
    [switch]$ListFromEngine,

    [Parameter(Mandatory = $true, ParameterSetName="pushadaptables")]
    [Parameter(Mandatory = $true, ParameterSetName="listadaptables")]
    [Parameter(Mandatory = $true, ParameterSetName="deleteadaptables")]
    [Parameter(Mandatory = $true, ParameterSetName="deleteadaptablesmenu")]
    [Alias("Type")]
    [ValidateSet("App","Bulk","CA","Credential","Log","SSHIssuanceFlow","SSHManagement","Workflow")]
    [string]$AdaptableType,

    [Parameter(Mandatory = $false, ParameterSetName="pushadaptables")]
    [Alias("FilePath")]
    [ValidateScript({
        if(-Not ($_ | Test-Path) ){
            throw "File or folder does not exist"
        }
        if(-Not ($_ | Test-Path -PathType Leaf) ){
            throw "The Path argument must be a file. Folder paths are not allowed."
        }
        return $true 
    })]
    [string]$AdaptableFileLocalPath,

    [Parameter(Mandatory = $true, ParameterSetName="deleteadaptables")]
    [ValidateScript({
        if($_ -match "(\\)"){
            throw "The AdaptableFileName must be ONLY the name of the file and CANNOT include the filepath. ex) myfile.ps1. Run -ListAdaptables to list the adaptables on your TLSPD engines."
        }
        return $true 
    })]
    [string]$AdaptableFileName,

    [Parameter(ParameterSetName="servicerestart")]
    [Parameter(ParameterSetName="iisreset")]
    [Parameter(ParameterSetName="deleteadaptables")]
    [Parameter(ParameterSetName="pushadaptables")]
    [switch]$Confirm,

    [Parameter()]
    [switch]$Quiet
    
)

if (-not $Quiet) {
    $InformationPreference = 'continue'
}

if ($PSBoundParameters.ContainsKey('AdaptableType')) {
    switch ($AdaptableType) {
        'App'               { $AdaptableFolder = 'Scripts\AdaptableApp\' }
        'Bulk'              { $AdaptableFolder = 'Scripts\AdaptableBulk\'}
        'CA'                { $AdaptableFolder = 'Scripts\AdaptableCA\'}
        'Credential'        { $AdaptableFolder = 'Scripts\AdaptableCredential\'}
        'Log'               { $AdaptableFolder = 'Scripts\AdaptableLog\'}
        'SSHIssuanceFlow'   { $AdaptableFolder = 'Scripts\AdaptableSSHCertificateIssuanceFlow\'}
        'SSHManagement'     { $AdaptableFolder = 'Scripts\AdaptableSSHManagement\'}
        'Workflow'          { $AdaptableFolder = 'Scripts\AdaptableWorkflow\'}
        
    }
}

function Restart-Services {
    Write-Information "Restarting services"
    Invoke-Command -ComputerName $EngineName -Credential $Credential -ScriptBlock {
        restart-service $Using:VenafiServices -ErrorAction SilentlyContinue -PassThru -WarningAction SilentlyContinue
    }
}
function Restart-IIS {
    Write-Information "Resetting IIS"
    $Result = Invoke-Command -ComputerName $EngineName -Credential $Credential -ScriptBlock { [pscustomobject]@{ iisresult = iisreset; ResetSucessful = $?}}
    $Result | Select-Object -Property PSComputerName,ResetSucessful
}

function Install-Adaptable {
    Write-Information "Connecting to TLSPD Engines"
    $Sessions = New-PSSession -ComputerName $EngineName -Credential $credential

    Write-Information "Installing adaptable $($AdaptableType)"
    foreach ($Session in $Sessions){
        $InstallPath = Invoke-Command -Session $Session -ScriptBlock {
            Get-ItemPropertyValue -Path HKLM:\SOFTWARE\Venafi\Platform\ -Name 'Base Path'
        }
        $DestinationFolder = $InstallPath + $AdaptableFolder 
        Copy-Item -Path $AdaptableFileLocalPath -Destination $DestinationFolder -ToSession $Session

    }
    $Session | Remove-PSSession
}

function Remove-Adaptable {
    Write-Information "Connecting to TLSPD Engines"
    $Sessions = New-PSSession -ComputerName $EngineName -Credential $credential

    Write-Information "Deleting adaptable $($AdaptableType)"
    foreach ($Session in $Sessions){
  
        $InstallPath = Invoke-Command -Session $Session -ScriptBlock {
            Get-ItemPropertyValue -Path HKLM:\SOFTWARE\Venafi\Platform\ -Name 'Base Path'
        }
        $Adaptablefile = $InstallPath + $AdaptableFolder + $AdaptableFileName
        Write-Verbose "Deleting: $($Adaptablefile)"
        $result = Invoke-Command -Session $Session -ScriptBlock { 
            if (Test-Path -Path $Using:Adaptablefile ) {
                Remove-Item -Path $Using:Adaptablefile -Force
                [pscustomobject]@{ DeleteSucessful = $?}
            }else {
                [pscustomobject]@{ DeleteSucessful = $?; error = "File not found: $($Using:Adaptablefile)"}
            }
        }
        $Result | Select-Object -Property PSComputerName,DeleteSucessful,error
    }
}

function Get-InstalledAdapables {
    param (
        [Parameter()]
        [switch]$AllFiles
    )

    Write-Information "Connecting to TLSPD Engines"
    $Sessions = New-PSSession -ComputerName $EngineName -Credential $credential

    Write-Information "Gathering $($AdaptableType) adaptables"
    foreach ($Session in $Sessions){
        Write-Verbose "Session: $($Session.ComputerName): $($session.State) "
        $InstallPath = Invoke-Command -Session $Session -ScriptBlock {
            Get-ItemPropertyValue -Path HKLM:\SOFTWARE\Venafi\Platform\ -Name 'Base Path'
        }
        Write-Verbose "Venafi install path: $($InstallPath)"
        $DestinationFolder = $InstallPath + $AdaptableFolder 

        if ($AllFiles) {
            $Result = Invoke-Command -Session $Session -ScriptBlock {
                Get-ChildItem -File -LiteralPath $Using:DestinationFolder -Name
            }
        }else {
            $Result = Invoke-Command -Session $Session -ScriptBlock {
                Get-ChildItem -File -LiteralPath $Using:DestinationFolder -Name -Filter '*.ps1'
            }
        }

        if ($Result) {
            $Result |  ForEach-Object {
                [pscustomobject]@{
                    Adaptable = $_
                    Engine = $_.PSComputerName
                }
            }
        }
        
        $Session | Remove-PSSession
    }
}

# begin fun
switch -Regex ($PsCmdlet.ParameterSetName) {
    'status' {
        Write-Information "Gathering status of requested services"
        $Result = Invoke-Command -ComputerName $EngineName -Credential $Credential -ScriptBlock {get-service $Using:VenafiServices -ErrorAction SilentlyContinue}
        $Result |  ForEach-Object {
            [pscustomobject]@{
                Computername = $_.PSComputerName
                name = $_.name
                status = $_.status
            }
        }
    }
    'servicerestart' {
        if ( -not $Confirm){
            Write-Warning "Restart of services requested on the Following TLSPD Engines: `n - $($engineName -join "`n - ") `n"
            Write-Warning "Services requested to Restart:`n - $($VenafiServices -join "`n - ")"
            switch -Regex (Read-Host -Prompt "Are you sure you would like to restart the above services on the above engines (Y/N)") {
                'Y|Yes|y|yes|YES' {
                    Restart-Services
                }
                default {Write-Output "Service Restart Cancelled."}
            }
        } else {
            Restart-Services
        }
    }
    'iisreset' {
        if ( -not $Confirm){
            Write-Warning "iisreset requested on the following TLSPD Engines: $engineNames  `n - $($engineName -join "`n - ") `n"
            switch -Regex (Read-Host -Prompt "Are you sure you would like to run iisreset on the above engines (Y/N)") {
                'Y|Yes|y|yes' { Restart-IIS }
                default { Write-Output "iisreset cancelled" }
            }
        } else {
            Restart-IIS
        }
       
    }
    'pushadaptables' {
        if ( -not $Confirm){
            if ( -not $PSBoundParameters.ContainsKey('AdaptableFileLocalPath')) {
                Add-Type -AssemblyName System.Windows.Forms
                    $FileBrowser = New-Object System.Windows.Forms.OpenFileDialog -Property @{ 
                    InitialDirectory = [Environment]::GetFolderPath('Desktop') 
                    Title = "Select the Adaptable Driver to install on your TLSPD Engines"
                    Filter = 'Powershell Scripts (*.ps1)|*.ps1|All files (*.*)|*.*'
                    FilterIndex = 1
                }
                $null = $FileBrowser.ShowDialog()
                $AdaptableFileLocalPath = $FileBrowser.FileName
            }
            Write-Warning "Installation of the below adaptable driver requested on the following TLSPD Engines: `n - $($engineName -join "`n - ") `n"
            Write-Warning "Adaptable type selected: $($AdaptableType)"
            Write-Warning "Driver: $($AdaptableFileLocalPath)"
            switch -Regex (Read-Host -Prompt "Are you sure you would like to install this Adaptable Driver on the above engines (Y/N)") {
                'Y|Yes|y|yes' { Install-Adaptable }
                default { Write-Output "Adaptable push cancelled" }
            }
        } else {
            Install-Adaptable
        }
    }
    'deleteadaptables|deleteadaptablesmenu'{
        if ($ListFromEngine) {#menu
            $InstalledAdaptables  = @()
            if ($AllFileTypes) {
                $InstalledAdaptables += Get-InstalledAdapables -AllFiles | Select-Object -ExpandProperty Adaptable | Get-Unique
            }else {
                $InstalledAdaptables += Get-InstalledAdapables | Select-Object -ExpandProperty Adaptable | Get-Unique
            }
            $Menu= @{}
            for ($i=1;$i -le $InstalledAdaptables.count; $i++) { 
                Write-Host "$i. $($InstalledAdaptables[$i-1])" 
                $Menu.Add($i,($InstalledAdaptables[$i-1]))
            }
            
            [int]$Answer = Read-Host 'Enter the number of the adaptable driver to delete (CTRL+C to cancel)'
            $AdaptableFileName = $Menu.Item($Answer)

        }

        if ( -not $Confirm){
            Write-Warning "Deletion of the below adaptable driver requested on the following TLSPD Engines: `n - $($engineName -join "`n - ") `n"
            Write-Warning "Adaptable type selected: $($AdaptableType)"
            Write-Warning "Driver: $($AdaptableFileName)"
            switch -Regex (Read-Host -Prompt "Are you sure you would like to delete this Adaptable Driver on the above engines (Y/N)") {
                'Y|Yes|y|yes' { Remove-Adaptable }
                default { Write-Output "Adaptable deletion cancelled" }
            }
        } else {
            Remove-Adaptable
        }
    }
    'listadaptables' {
        if ($AllFileTypes) {
            Get-InstalledAdapables -AllFiles
        }else {
            Get-InstalledAdapables
        }
        
    }
}